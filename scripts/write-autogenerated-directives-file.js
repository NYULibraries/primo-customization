import * as fs from 'node:fs';
import {EOL} from 'node:os';
import path from 'node:path';
import * as url from 'url';

const __dirname = url.fileURLToPath( new URL( '.', import.meta.url ) );

const ROOT = path.join( __dirname, '..' );

const AUTOGENERATED_DIRECTIVES_FILE = path.join( ROOT, 'custom/01NYU_INST-TESTWS01/js/02-autogenerated-directives.js' );
const EXCLUDED_IDS = {
    'prm-explore-footer-after': true,
    'prm-explore-main-after': true,
    'prm-search-after': true,
    'prm-silent-login-after': true,
};

const EXLIBRIS_TEMPLATE_CACHE_CODE_FILE = path.join( ROOT, 'scripts/exlibris-template-cache-code.txt' );
const PARENT_CTRL_ATTRIBUTE_REGEXP = new RegExp( /parent-ctrl="\$ctrl"/ );

const lines = fs.readFileSync( EXLIBRIS_TEMPLATE_CACHE_CODE_FILE, { encoding: 'utf8' } )
    .toString()
    .split( EOL );

const idsObject = {};
lines.forEach( line => {
    if ( ! line.startsWith( '$templateCache.put' ) ) {
        return;
    }

    if ( line.match( PARENT_CTRL_ATTRIBUTE_REGEXP ) ) {
        const extractedIds = extractIds( line );
        if ( extractedIds.length > 0 ) {
            extractedIds.forEach( extractedId => {
                if ( ! EXCLUDED_IDS[ extractedIds ] ) {
                    idsObject[ extractedId ] = true;
                }
            } );
        }
    }
} );

const ids = Object.keys( idsObject ).sort();

let componentsJs = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// SEE README.MD FOR INSTRUCTIONS ON HOW TO REGENERATE THIS FILE.

`;

ids.forEach( id => {
    const componentJs =
`app.component( '${ convertKebabCaseToCamelCase( id ) }', {
    bindings   : { parentCtrl: '<' },
    templateUrl: \`\${ cdnUrl }/html/${ id }.html\`,
} );`;

    componentsJs += componentJs + EOL + EOL;
} );

fs.writeFileSync( AUTOGENERATED_DIRECTIVES_FILE, componentsJs, { encoding: 'utf8' } );

// Source: answer by kanine
// https://stackoverflow.com/questions/57556471/convert-kebab-case-to-camelcase-with-javascript
function convertKebabCaseToCamelCase( string ) {
    return string.replace( /-./g, x => x[ 1 ].toUpperCase() );
}

function extractIds( line ) {
    const [ html ] = line.match( /<.*>/ );

    const elements = html.match( /<.*?>/g );

    const idsObject = {};
    for ( let i = 0; i < elements.length; i++ ) {
        const element = elements[ i ];

        // Example: <prm-account-after parent-ctrl="$ctrl">
        if ( element.match( PARENT_CTRL_ATTRIBUTE_REGEXP ) ) {
            const [ skip, id ] = element.match( /^<([a-zA-Z-]+) / );

            idsObject[ id ] = true;
        }
    }

    return Object.keys( idsObject ).sort();
}
